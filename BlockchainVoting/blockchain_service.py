import os
import logging
from web3 import Web3
import json

class BlockchainService:
    def __init__(self):
        # Use environment variables for blockchain configuration
        self.rpc_url = 'https://sepolia.infura.io/v3/e901b8fc7d05402590bb9952dec1f88a'
        self.private_key = '42a7ecacdf8d76c86a77a3b01e101d6feb36514a6e6a03888fde50d176f872f6'
        try:
            self.w3 = Web3(Web3.HTTPProvider(self.rpc_url))
            self.is_connected = self.w3.is_connected()
            if self.is_connected:
                logging.info("Connected to Ethereum network")
            else:
                logging.warning("Failed to connect to Ethereum network")
        except Exception as e:
            logging.error(f"Blockchain connection error: {str(e)}")
            self.is_connected = False
    
    def get_contract_abi(self):
        """Returns the ABI for the voting contract"""
        return [
            {
                "inputs": [
                    {"internalType": "string[]", "name": "_candidateNames", "type": "string[]"}
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [
                    {"internalType": "uint256", "name": "_candidateId", "type": "uint256"}
                ],
                "name": "vote",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {"internalType": "uint256", "name": "_candidateId", "type": "uint256"}
                ],
                "name": "getVotes",
                "outputs": [
                    {"internalType": "uint256", "name": "", "type": "uint256"}
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getCandidatesCount",
                "outputs": [
                    {"internalType": "uint256", "name": "", "type": "uint256"}
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {"internalType": "address", "name": "", "type": "address"}
                ],
                "name": "hasVoted",
                "outputs": [
                    {"internalType": "bool", "name": "", "type": "bool"}
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ]
    
    def get_contract_bytecode(self):
        """Returns the bytecode for the voting contract"""
        # This would normally be compiled from the Solidity contract
        # For demo purposes, returning a placeholder
        return "0x608060405234801561001057600080fd5b506040516108a83803806108a88339818101604052810190610032919061024a565b80600190805190602001906100489291906100eb565b5060005b81518110156100815760008060008381526020019081526020016000208190555080806100789061037a565b91505061004c565b50506103c3565b82805482825590600052602060002090810192821561012a579160200282015b828111156101295782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906100a8565b5b509050610137919061013b565b5090565b5b80821115610154576000816000905550600101610147565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101bf82610176565b810181811067ffffffffffffffff821117156101de576101dd610187565b5b80604052505050565b60006101f1610158565b90506101fd82826101b6565b919050565b600067ffffffffffffffff82111561021d5761021c610187565b5b602082029050602081019050919050565b600080fd5b600080fd5b600061024b61024684610202565b6101e7565b9050808382526020820190506020840283018581111561026e5761026d61022e565b5b835b8181101561029757806102838882610233565b845260208401935050602081019050610270565b5050509392505050565b600082601f8301126102b6576102b5610171565b5b81516102c6848260208601610238565b91505092915050565b6000602082840312156102e5576102e4610162565b5b600082015167ffffffffffffffff81111561030357610302610167565b5b61030f848285016102a1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061035f57607f821691505b6020821081141561037357610372610318565b5b50919050565b600061038482610347565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156103b7576103b66102e9565b5b600182019050919050565b6104d6806103d26000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630121b93f1461005c578063013cf08b146100785780632f265cf7146100965780635c19a95c146100b45780639e7b8d61146100d0575b600080fd5b610076600480360381019061007191906102a0565b6100ec565b005b610080610198565b60405161008d91906102cd565b60405180910390f35b61009e61019e565b6040516100ab91906102cd565b60405180910390f35b6100ce60048036038101906100c99190610314565b6101a4565b005b6100ea60048036038101906100e59190610314565b610250565b005b60018160001c9050600081111561013a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610131906103ad565b60405180910390fd5b6001600083815260200190815260200160002060009054906101000a900460ff161561019b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019290610419565b60405180910390fd5b60016000838152602001908152602001600020600a6101000a81548160ff02191690831515021790555080600260008282546101d79190610468565b925050819055507f3e7e6db3d5d14c2b1b1fbe08a3e3e83fa6b76c3b5ae0e8e8e8e8e8e8e8e8e8e8826040516101f091906102cd565b60405180910390a15050565b60025481565b60015481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561022b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610222906104b0565b60405180910390fd5b600160026000338152602001908152602001600020600a6101000a81548160ff021916908315150217905550565b6001600082815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080fd5b6000819050919050565b6102ad8161029a565b81146102b857600080fd5b50565b6000813590506102ca816102a4565b92915050565b6000602082840312156102e6576102e5610295565b5b60006102f4848285016102bb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610328826102fd565b9050919050565b6103388161031d565b811461034357600080fd5b50565b6000813590506103558161032f565b92915050565b60006020828403121561037157610370610295565b5b600061037f84828501610346565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642063616e6469646174652049442e000000000000000000000000600082015250565b60006103d1601583610388565b91506103dc82610399565b602082019050919050565b600060208201905081810360008301526103f0816103c4565b9050919050565b7f596f752068617665206e6f7420766f746564207965742e0000000000000000000600082015250565b600061042d601883610388565b915061043882610407565b602082019050919050565b6000602082019050818103600083015261045c81610420565b9050919050565b60006104ae8261029a565b91506104b98361029a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156104ee576104ed6104bf565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f596f752068617665206e6f74207265676973746572656420746f20766f74652e600082015250565b6000610564602083610388565b915061056f8261052e565b602082019050919050565b60006020820190508181036000830152610593816104e6565b905091905056fea26469706673582212208c7e8b8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c64736f6c63430008070033"
    
    def verify_transaction(self, tx_hash):
        """Verify if a transaction exists on the blockchain"""
        try:
            if not self.is_connected:
                return False
            
            receipt = self.w3.eth.get_transaction_receipt(tx_hash)
            return receipt is not None and receipt.status == 1
        except Exception as e:
            logging.error(f"Error verifying transaction: {str(e)}")
            return False
    
    def get_account_balance(self, address):
        """Get ETH balance for an address"""
        try:
            if not self.is_connected:
                return 0
            
            balance_wei = self.w3.eth.get_balance(address)
            balance_eth = self.w3.from_wei(balance_wei, 'ether')
            return float(balance_eth)
        except Exception as e:
            logging.error(f"Error getting balance: {str(e)}")
            return 0
